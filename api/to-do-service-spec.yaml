openapi: 3.1.0

info:
  title: Task Management API
  description: A comprehensive API for managing to-do tasks and users.
  version: 1.0.0
  contact:
    name: To-Do Service Support
    email: api-support@example.com

servers:
  - url: http://localhost:3000
    description: Local server for testing. Often, this is the development server.

tags:
  - name: Users
    description: User management endpoints that provide operations for managing user accounts.
  - name: Tasks
    description: Task management endpoints that provide operations for managing to-do tasks.

security:
  - bearerAuth: []

paths:
  /users:
    get:
      summary: Get all users
      description: Returns a list of all users in the system. Supports pagination and sorting.
      tags:
        - Users
      operationId: getAllUsers
      parameters:
        - $ref: '#/components/parameters/PaginationPageParam'
        - $ref: '#/components/parameters/PaginationPerPageParam'
        - $ref: '#/components/parameters/SortParam'
      responses:
        '200':
          $ref: '#/components/responses/SuccessGetAllUsers'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      summary: Create a new user
      tags:
        - Users
      operationId: postNewUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
            examples:
              newUser:
                $ref: '#/components/examples/NewUser'
      responses:
        '201':
          $ref: '#/components/responses/SuccessPostOneUser'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

  /users/{userId}:
    get:
      summary: Get a user by ID
      description: Returns a single user based on their unique `userId`.
      tags:
        - Users
      operationId: getOneUser
      parameters:
        - $ref: '#/components/parameters/UserIdPathParam'
      responses:
        '200':
          $ref: '#/components/responses/SuccessGetOneUser'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

    patch:
      summary: Update a user
      description: Update one or more properties of an existing user. The API supports partial updates.
      tags:
        - Users
      operationId: patchOneUser
      parameters:
        - $ref: '#/components/parameters/UserIdPathParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPatch'
            examples:
              userPatch:
                $ref: '#/components/examples/UserPatch'
      responses:
        '200':
          $ref: '#/components/responses/SuccessPatchOneUser'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      summary: Delete a user by ID
      description: Removes the specified user.
      tags:
        - Users
      operationId: deleteOneUser
      parameters:
        - $ref: '#/components/parameters/UserIdPathParam'
      responses:
        '204':
          $ref: '#/components/responses/SuccessDeleteOneUser'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

  /tasks:
    get:
      summary: Get all tasks
      description: Returns a list of all tasks. Supports pagination and sorting.
      tags:
        - Tasks
      operationId: getAllTasks
      parameters:
        - $ref: '#/components/parameters/PaginationPageParam'
        - $ref: '#/components/parameters/PaginationPerPageParam'
        - $ref: '#/components/parameters/SortParam'
        - $ref: '#/components/parameters/TaskStatusFilterParam'
      responses:
        '200':
          $ref: '#/components/responses/SuccessGetAllTasks'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      summary: Create a new task
      tags:
        - Tasks
      operationId: postOneTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInput'
            examples:
              newTask:
                $ref: '#/components/examples/NewTask'
      responses:
        '201':
          $ref: '#/components/responses/SuccessPostOneTask'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

  /tasks/{taskId}:
    get:
      summary: Get a task by ID
      description: Returns a single task based on its unique `taskId`.
      tags:
        - Tasks
      operationId: getOneTask
      parameters:
        - $ref: '#/components/parameters/TaskIdPathParam'
      responses:
        '200':
          $ref: '#/components/responses/SuccessGetOneTask'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

    patch:
      summary: Update a task
      description: Update one or more properties of an existing task. The API supports partial updates.
      tags:
        - Tasks
      operationId: patchOneTask
      parameters:
        - $ref: '#/components/parameters/TaskIdPathParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskPatch'
            examples:
              taskPatch:
                $ref: '#/components/examples/TaskPatch'
      responses:
        '200':
          $ref: '#/components/responses/SuccessPatchOneTask'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      summary: Delete a task by ID
      description: Removes the specified task.
      tags:
        - Tasks
      operationId: deleteOneTask
      parameters:
        - $ref: '#/components/parameters/TaskIdPathParam'
      responses:
        '204':
          $ref: '#/components/responses/SuccessDeleteOneTask'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  parameters:
    PaginationPageParam:
      name: _page
      in: query
      description: Page number for paginated results (zero-indexed).
      schema:
        type: integer
        minimum: 0
        default: 0
      example: 0

    PaginationPerPageParam:
      name: _perPage
      in: query
      description: Number of items per page (maximum 100).
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      example: 20

    SortParam:
      name: _sort
      in: query
      description: Field to sort by, prefixed with `-` to indicate descending order.
      schema:
        type: string
      examples:
        ascendingByName:
          value: "firstName"
          summary: Sort by first name ascending
        descendingByDate:
          value: "-dueDate"
          summary: Sort by due date descending
        byStatus:
          value: "taskStatus"
          summary: Sort by task status ascending

    TaskStatusFilterParam:
      name: taskStatus
      in: query
      description: Filter tasks by their status. Returns only tasks with the specified status.
      schema:
        $ref: '#/components/schemas/TaskStatus'
      examples:
        notStarted:
          value: "NOT_STARTED"
          summary: Filter for tasks not yet started
        inProgress:
          value: "IN_PROGRESS"
          summary: Filter for tasks currently in progress
        completed:
          value: "COMPLETED"
          summary: Filter for completed tasks

    UserIdPathParam:
      name: userId
      in: path
      required: true
      description: The unique `userId` of the `user` resource to retrieve.
      schema:
        type: integer

    TaskIdPathParam:
      name: taskId
      in: path
      required: true
      description: The unique `taskId` of the `task` resource to retrieve.
      schema:
        type: integer

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

  schemas:
    User:
      type: object
      properties:
        userId:
          $ref: '#/components/schemas/UserId'
        lastName:
          $ref: '#/components/schemas/LastName'
        firstName:
          $ref: '#/components/schemas/FirstName'
        contactEmail:
          $ref: '#/components/schemas/ContactEmail'
      required:
        - userId
        - lastName
        - firstName
        - contactEmail
      description: Represents a user in the system with unique ID, name, and contact email. 
        Users must create a `user` resource before adding `task` resources.
        The application using the To-Do service handles the registration process that would use this operation.
        Once registered, there is no limit to the number of tasks that a user can create.

    UserInput:
      type: object
      properties:
        lastName:
          $ref: '#/components/schemas/LastName'
        firstName:
          $ref: '#/components/schemas/FirstName'
        contactEmail:
          $ref: '#/components/schemas/ContactEmail'
      required:
        - lastName
        - firstName
        - contactEmail
      description: Contains the data needed to create a new user.
        The `POST /users` operation uses this schema for the request body.
        The API ensures a unique `contactEmail` value and generates a unique `userId` for the new user.

    UserPatch:
      type: object
      properties:
        lastName:
          $ref: '#/components/schemas/LastName'
        firstName:
          $ref: '#/components/schemas/FirstName'
        contactEmail:
          $ref: '#/components/schemas/ContactEmail'
      minProperties: 1
      description: Contains the data you can update for an existing user.
        The `PATCH /users/{userId}` operation uses this schema for partial updates,
        so you can provide only the fields that you want to change.
        The API ensures `contactEmail` remains unique across all users.

    Task:
      type: object
      properties:
        taskId:
          $ref: '#/components/schemas/TaskId'
        userId:
          $ref: '#/components/schemas/UserId'
        taskTitle:
          $ref: '#/components/schemas/TaskTitle'
        taskDescription:
          $ref: '#/components/schemas/TaskDescription'
        taskStatus:
          $ref: '#/components/schemas/TaskStatus'
        dueDate:
          $ref: '#/components/schemas/DueDate'
        warningOffset:
          $ref: '#/components/schemas/WarningOffset'
      required:
        - taskId
        - userId
        - taskTitle
        - taskStatus
        - dueDate
        - warningOffset
      description: Represents a task with unique ID, creator's user ID, 
        title, description, status, due date, and warning offset.

    TaskInput:
      type: object
      properties:
        userId:
          $ref: '#/components/schemas/UserId'
        taskTitle:
          $ref: '#/components/schemas/TaskTitle'
        taskDescription:
          $ref: '#/components/schemas/TaskDescription'
        taskStatus:
          $ref: '#/components/schemas/TaskStatus'
        dueDate:
          $ref: '#/components/schemas/DueDate'
        warningOffset:
          $ref: '#/components/schemas/WarningOffset'
      required:
        - userId
        - taskTitle
        - dueDate
        - warningOffset
      description: Contains the data needed to create a new task.
        The `POST /tasks` operation uses this schema for the request body.
        The API doesn't check for duplicates, so similar tasks may exist.
        The API generates a unique `taskId`, requires a valid `userId`,
        ensures `dueDate` is in the future, and requires a positive `warningOffset`.
        If `taskStatus` is not provided, it defaults to `NOT_STARTED`.

    TaskPatch:
      type: object
      properties:
        userId:
          $ref: '#/components/schemas/UserId'
        taskTitle:
          $ref: '#/components/schemas/TaskTitle'
        taskDescription:
          $ref: '#/components/schemas/TaskDescription'
        taskStatus:
          $ref: '#/components/schemas/TaskStatus'
        dueDate:
          $ref: '#/components/schemas/DueDate'
        warningOffset:
          $ref: '#/components/schemas/WarningOffset'
      minProperties: 1
      description: Contains the data you can update for an existing task.
        The `PATCH /tasks/{taskId}` operation uses this schema to support partial updates.
        Use this to update the `taskStatus` when task progress changes.
        To mark a task as completed, use this to update the `taskStatus` to `COMPLETED`.

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          $ref: '#/components/schemas/ErrorCode'
        message:
          $ref: '#/components/schemas/ErrorMessage'
        details:
          type: array
          description: Additional error details when available.
          items:
            type: object
            properties:
              field:
                type: string
                description: The field that caused the error.
                examples:
                  - value: "contactEmail"
              reason:
                type: string
                description: Specific reason for the error.
                examples:
                  - value: "Invalid format"
                  - value: "Is required"
              location:
                type: string
                description: Where the error occurred (query, path, body).
                examples:
                  - value: "body"
        requestId:
          $ref: '#/components/schemas/RequestId'
      description: Describes the structure of an error response,
        including the error code, message, and optional details.

    ErrorCode:
      type: string
      description: Error code that identifies the type of error.
      examples:
        - value: "INVALID_FIELD"
        - value: "MISSING_REQUIRED_FIELD"
        - value: "RESOURCE_NOT_FOUND"

    ErrorMessage:
      type: string
      description: Human-readable error message.
      examples:
        - value: "The field `contactEmail` must be a valid email address."
        - value: "The `lastName` field is required."
        - value: "The requested resource could not be found."

    RequestId:
      type: string
      description: Request identifier for troubleshooting.
      examples:
        - value: "req-f8d31a62-e789-4856-9452-5efa50223c7a"

    UserId:
      description: The unique ID of the user's account in the service.
      type: integer

    LastName:
      description: The user's last name.
      type: string
      minLength: 1
      maxLength: 100

    FirstName:
      description: The user's first name.
      type: string
      minLength: 1
      maxLength: 100

    ContactEmail:
      description: The user's email address.
      type: string
      pattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
      maxLength: 255
      minLength: 3
      format: email

    TaskId:
      description: The system-defined, unique ID that identifies the task.
      type: integer

    TaskTitle:
      description: The short description of the task, used as the title in lists and headings.
      type: string
      minLength: 1
      maxLength: 80

    TaskDescription:
      description: The detailed description of the task.
      type: string
      minLength: 1
      maxLength: 255

    TaskStatus:
      description: |
        The current status of the task in its lifecycle.
        The status can be one of the following:
        - NOT_STARTED: The task has not been started yet.
        - IN_PROGRESS: The task is currently being worked on.
        - BLOCKED: The task cannot proceed due to an external factor.
        - DEFERRED: The task has been postponed to a later time.
        - COMPLETED: The task has been finished.
        - CANCELLED: The task has been cancelled and will not be completed.
      type: string
      enum:
        - NOT_STARTED
        - IN_PROGRESS
        - BLOCKED
        - DEFERRED
        - COMPLETED
        - CANCELLED
      default: NOT_STARTED
      examples:
        - value: "NOT_STARTED"
        - value: "IN_PROGRESS"
        - value: "COMPLETED"

    DueDate:
      description: The date and time that the task should be performed.
      type: string
      format: date-time

    WarningOffset:
      description: The number of minutes before the due date and time to send the reminder.
      type: integer
      minimum: 0
      maximum: 64000

  responses:
    SuccessGetAllUsers:
      description: Successful response that returns a list of users.
      content:
        application/json:
          schema:
            type: object
            properties:
              users:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          examples:
            usersList:
              $ref: '#/components/examples/UsersList'

    SuccessGetOneUser:
      description: Successful response that returns a single user.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
          examples:
            singleUser:
              $ref: '#/components/examples/SingleUser'

    SuccessPostOneUser:
      description: Successful response that returns the newly created user.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
          examples:
            createdUser:
              $ref: '#/components/examples/CreatedUser'

    SuccessPatchOneUser:
      description: Successful response that returns the updated user.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
          examples:
            updatedUser:
              $ref: '#/components/examples/UpdatedUser'

    SuccessDeleteOneUser:
      description: Confirms successful user deletion. Returns no content.

    SuccessGetAllTasks:
      description: Successful response that returns a list of tasks.
      content:
        application/json:
          schema:
            type: object
            properties:
              tasks:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
          examples:
            tasksList:
              $ref: '#/components/examples/TasksList'

    SuccessGetOneTask:
      description: Successful response that returns a single task.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Task'
          examples:
            singleTask:
              $ref: '#/components/examples/SingleTask'

    SuccessPostOneTask:
      description: Successful response that returns the newly created task.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Task'
          examples:
            createdTask:
              $ref: '#/components/examples/CreatedTask'

    SuccessPatchOneTask:
      description: Successful response that returns the updated task.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Task'
          examples:
            updatedTask:
              $ref: '#/components/examples/UpdatedTask'

    SuccessDeleteOneTask:
      description: Confirms successful task deletion. Returns no content.

    BadRequest:
      description: The request was malformed or contains invalid parameters.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            invalidParameter:
              summary: Invalid parameter
              description: The request contains values that fail validation,
                such as an incorrectly formatted `contactEmail` or a non-existent `userId`.
              value:
                code: "INVALID_FIELD"
                message: "The field `contactEmail` must be a valid email address"
                details:
                  - field: "email"
                    reason: "Invalid format"
                    location: "body"
                requestId: "req-f8d31a62-e789-4856-9452-5efa50223c7a"
            missingRequired:
              summary: Missing required field
              value:
                code: "MISSING_REQUIRED_FIELD"
                message: "The `lastName` field is required."
                details:
                  - field: "lastName"
                    reason: "Is required"
                    location: "body"
                requestId: "req-f8d31a62-e789-4856-9452-5efa50223c7a"
            invalidStatus:
              summary: Invalid task status
              value:
                code: "INVALID_FIELD"
                message: "The `taskStatus` value 'DONE' is not valid."
                details:
                  - field: "taskStatus"
                    reason: "Invalid value"
                    location: "body"
                requestId: "req-f8d31a62-e789-4856-9452-5efa50223c7a"

    Unauthorized:
      description: Authentication is required or the provided credentials are invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "UNAUTHORIZED"
            message: "Authentication is required to access this resource"
            requestId: "req-f8d31a62-e789-4856-9452-5efa50223c7a"

    Forbidden:
      description: The authenticated user does not have permission to access the requested resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "FORBIDDEN"
            message: "You do not have permission to access this resource"
            requestId: "req-f8d31a62-e789-4856-9452-5efa50223c7a"

    NotFound:
      description: The requested resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "RESOURCE_NOT_FOUND"
            message: "The requested resource could not be found"
            requestId: "req-f8d31a62-e789-4856-9452-5efa50223c7a"

    TooManyRequests:
      description: The client has sent too many requests in a given amount of time.
      headers:
        Retry-After:
          schema:
            type: integer
          description: Number of seconds to wait before making a new request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "RATE_LIMIT_EXCEEDED"
            message: "Rate limit exceeded. Try again in 30 seconds"
            requestId: "req-f8d31a62-e789-4856-9452-5efa50223c7a"

    ServerError:
      description: An unexpected server error occurred.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "SERVER_ERROR"
            message: "An unexpected error occurred. Please try again later"
            requestId: "req-f8d31a62-e789-4856-9452-5efa50223c7a"

  examples:
    UsersList:
      summary: List of users
      value:
        users:
          - userId: 1
            lastName: "Smith"
            firstName: "Ferdinand"
            contactEmail: "f.smith@example.com"
          - userId: 2
            lastName: "Jones"
            firstName: "Jill"
            contactEmail: "j.jones@example.com"
          - userId: 3
            lastName: "Martinez"
            firstName: "Marty"
            contactEmail: "m.martinez@example.com"
          - userId: 4
            lastName: "Bailey"
            firstName: "Bill"
            contactEmail: "b.bailey@example.com"

    NewUser:
      summary: Example of new user data
      value:
        lastName: "Doe"
        firstName: "John"
        contactEmail: "j.doe@example.com"

    CreatedUser:
      summary: Example of newly created user
      value:
        userId: 5
        lastName: "Doe"
        firstName: "John"
        contactEmail: "j.doe@example.com"

    SingleUser:
      summary: Example of a single user
      value:
        userId: 1
        lastName: "Smith"
        firstName: "Ferdinand"
        contactEmail: "f.smith@example.com"

    UserPatch:
      summary: Example of user patch data
      value:
        contactEmail: "new.email@example.com"

    UpdatedUser:
      summary: Example of updated user
      value:
        userId: 1
        lastName: "Smith"
        firstName: "Ferdinand"
        contactEmail: "new.email@example.com"

    TasksList:
      summary: List of tasks
      value:
        tasks:
          - userId: 1
            taskTitle: "Grocery shopping"
            taskDescription: "eggs, bacon, gummy bears"
            taskStatus: "NOT_STARTED"
            dueDate: "2024-02-20T17:00:00.000-05:00"
            warningOffset: 60
            taskId: 1
          - userId: 1
            taskTitle: "Piano recital"
            taskDescription: "Daughter's first concert appearance"
            taskStatus: "IN_PROGRESS"
            dueDate: "2024-04-02T15:00:00-05:00"
            warningOffset: 30
            taskId: 2
          - userId: 2
            taskTitle: "Oil change"
            taskDescription: "5K auto service"
            taskStatus: "COMPLETED"
            dueDate: "2024-03-10T09:00:00-05:00"
            warningOffset: 60
            taskId: 3
          - userId: 3
            taskTitle: "Get shots for dog"
            taskDescription: "Annual vaccinations for poochy"
            taskStatus: "DEFERRED"
            dueDate: "2024-05-11T14:00:00-05:00"
            warningOffset: 20
            taskId: 4

    NewTask:
      summary: Example of new task data
      value:
        userId: 1
        taskTitle: "New Task"
        taskDescription: "Description of the new task"
        taskStatus: "NOT_STARTED"
        dueDate: "2024-06-01T12:00:00-05:00"
        warningOffset: 5

    CreatedTask:
      summary: Example of newly created task
      value:
        taskId: 5
        userId: 1
        taskTitle: "New Task"
        taskDescription: "Description of the new task"
        taskStatus: "NOT_STARTED"
        dueDate: "2024-06-01T12:00:00-05:00"
        warningOffset: 5

    SingleTask:
      summary: Example of a single task
      value:
        userId: 1
        taskTitle: "Grocery shopping"
        taskDescription: "eggs, bacon, gummy bears"
        taskStatus: "NOT_STARTED"
        dueDate: "2024-02-20T17:00:00-05:00"
        warningOffset: 10
        taskId: 1

    TaskPatch:
      summary: Example of task patch data for updating status
      value:
        taskStatus: "COMPLETED"

    UpdatedTask:
      summary: Example of updated task
      value:
        userId: 1
        taskTitle: "Grocery shopping"
        taskDescription: "Updated description"
        taskStatus: "COMPLETED"
        dueDate: "2024-02-20T17:00:00-05:00"
        warningOffset: 10
        taskId: 1