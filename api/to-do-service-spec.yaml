openapi: 3.1.0

info:
  title: Task Management API
  description: A comprehensive API for managing to-do tasks and users
  version: 1.0.0
  contact:
    name: To-Do Service Support
    email: api-support@example.com

servers:
  - url: http://localhost:3000
    description: Local server for testing.

tags:
  - name: Users
    description: User management endpoints
  - name: Tasks
    description: Task management endpoints

security:
  - bearerAuth: []

paths:
  /users:
    get:
      summary: Get all users
      description: >
        Returns all users in the to-do service's database.
        This description is very long and takes up several
        lines of YAML in the OAS document.


        This operation has no path or query parameters.
        It takes two newlines in the text to create one new line
        in the documentation.
      tags:
        - Users
      operationId: getAllUsers
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PerPageParam'
        - $ref: '#/components/parameters/SortParam'
      responses:
        '200':
          $ref: '#/components/responses/SuccessGetAllUsers'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      summary: Add a user
      tags:
        - Users
      operationId: postNewUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
            examples:
              newUser:
                $ref: '#/components/examples/NewUser'
      responses:
        '201':
          $ref: '#/components/responses/SuccessPostOneUser'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

  /users/{Id}:
    get:
      summary: Get a user by ID
      tags:
        - Users
      operationId: getOneUser
      parameters:
        - name: Id
          in: path
          required: true
          description: ID of the user
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/SuccessGetOneUser'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

    patch:
      summary: Update a property of a user (excluding ID)
      tags:
        - Users
      operationId: patchOneUser
      parameters:
        - name: Id
          in: path
          required: true
          description: ID of the user
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPatch'
            examples:
              userPatch:
                $ref: '#/components/examples/UserPatch'
      responses:
        '200':
          $ref: '#/components/responses/SuccessPatchOneUser'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      summary: Delete a user by ID
      tags:
        - Users
      operationId: deleteOneUser
      parameters:
        - name: Id
          in: path
          required: true
          description: ID of the user
          schema:
            type: integer
      responses:
        '204':
          $ref: '#/components/responses/SuccessDeleteOneUser'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

  /tasks:
    get:
      summary: Get all tasks
      tags:
        - Tasks
      operationId: getAllTasks
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PerPageParam'
        - $ref: '#/components/parameters/SortParam'
      responses:
        '200':
          $ref: '#/components/responses/SuccessGetAllTasks'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

    post:
      summary: Add a task
      tags:
        - Tasks
      operationId: postOneTask
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInput'
            examples:
              newTask:
                $ref: '#/components/examples/NewTask'
      responses:
        '201':
          $ref: '#/components/responses/SuccessPostOneTask'  
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

  /tasks/{TaskId}:
    get:
      summary: Get a task by ID
      tags:
        - Tasks
      operationId: getOneTask
      parameters:
        - name: TaskId
          in: path
          required: true
          description: ID of the task
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/SuccessGetOneTask'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

    patch:
      summary: Update a property of a task (excluding ID)
      tags:
        - Tasks
      operationId: patchOneTask
      parameters:
        - name: TaskId
          in: path
          required: true
          description: ID of the task
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskPatch'
            examples:
              taskPatch:
                $ref: '#/components/examples/TaskPatch'
      responses:
        '200':
          $ref: '#/components/responses/SuccessPatchOneTask'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      summary: Delete a task by ID
      tags:
        - Tasks
      operationId: deleteOneTask
      parameters:
        - name: TaskId
          in: path
          required: true
          description: ID of the task
          schema:
            type: integer
      responses:
        '204':
          $ref: '#/components/responses/SuccessDeleteOneTask'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  parameters:
    PageParam:
      name: _page
      in: query
      description: Page number for paginated results (zero-indexed)
      schema:
        type: integer
        minimum: 0
        default: 0
      example: 0
    
    PerPageParam:
      name: _perPage
      in: query
      description: Number of items per page (max 100)
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      example: 20
    
    SortParam:
      name: _sort
      in: query
      description: Field to sort by, prefixed with '-' for descending order
      schema:
        type: string
      examples:
        ascendingByName:
          value: "FirstName"
          summary: Sort by first name ascending
        descendingByDate:
          value: "-DueDate"
          summary: Sort by due date descending
    
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  
  schemas:
    User:
      type: object
      properties:
        Id:
          description: The unique ID of the user's account in the service
          type: integer
        LastName:
          description: The user's last name
          type: string
          minLength: 1
          maxLength: 100
        FirstName:
          description: The user's first name
          type: string
          minLength: 1
          maxLength: 100
        ContactEmail:
          description: The user's email address
          type: string
          pattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
          maxLength: 255
          minLength: 3
          format: email
      required:
        - Id
        - LastName
        - FirstName
        - ContactEmail
    
    UserInput:
      type: object
      properties:
        LastName:
          description: The user's last name
          type: string
          minLength: 1
          maxLength: 100
        FirstName:
          description: The user's first name
          type: string
          minLength: 1
          maxLength: 100
        ContactEmail:
          description: The user's email address
          type: string
          pattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
          maxLength: 255
          minLength: 3
          format: email
      required:
        - LastName
        - FirstName
        - ContactEmail
    
    UserPatch:
      type: object
      properties:
        LastName:
          description: The user's last name
          type: string
          minLength: 1
          maxLength: 100
        FirstName:
          description: The user's first name
          type: string
          minLength: 1
          maxLength: 100
        ContactEmail:
          description: The user's email address
          type: string
          pattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
          maxLength: 255
          minLength: 3
          format: email
      minProperties: 1
    
    Task:
      type: object
      properties:
        Id:
          description: The system-defined, unique ID that identifies the task
          type: integer
        UserId:
          description: The ID of the user who created this task
          type: integer
        TaskTitle:
          description: The short description of the task, used as the title in lists and headings.
          type: string
          minLength: 1
          maxLength: 80
        TaskDescription:
          description: The detailed description of the task.
          type: string
          minLength: 1
          maxLength: 255
        DueDate:
          description: The date and time that the task should be performed.
          type: string
          format: date-time
        WarningOffset:
          description: The number of minutes before the due date and time to send the reminder.
          type: integer
          minimum: 0
          maximum: 64000
      required:
        - Id
        - UserId
        - TaskTitle
        - DueDate
        - WarningOffset
    
    TaskInput:
      type: object
      properties:
        UserId:
          description: The ID of the user who created this task
          type: integer
        TaskTitle:
          description: The short description of the task, used as the title in lists and headings.
          type: string
          minLength: 1
          maxLength: 80
        TaskDescription:
          description: The detailed description of the task.
          type: string
          minLength: 1
          maxLength: 255
        DueDate:
          description: The date and time that the task should be performed.
          type: string
          format: date-time
        WarningOffset:
          description: The number of minutes before the due date and time to send the reminder.
          type: integer
          minimum: 0
          maximum: 64000
      required:
        - UserId
        - TaskTitle
        - DueDate
        - WarningOffset
    
    TaskPatch:
      type: object
      properties:
        UserId:
          description: The ID of the user who created this task
          type: integer
        TaskTitle:
          description: The short description of the task, used as the title in lists and headings.
          type: string
          minLength: 1
          maxLength: 80
        TaskDescription:
          description: The detailed description of the task.
          type: string
          minLength: 1
          maxLength: 255
        DueDate:
          description: The date and time that the task should be performed.
          type: string
          format: date-time
        WarningOffset:
          description: The number of minutes before the due date and time to send the reminder.
          type: integer
          minimum: 0
          maximum: 64000
      minProperties: 1

    ErrorNotFound:
      description: "Returns an empty object {}"
      type: object
      properties: {}
      additionalProperties: false
      maxProperties: 0

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: Error code that identifies the type of error
          examples:
            - value: "INVALID_FIELD"
        message:
          type: string
          description: Human-readable error message
          examples:
            - value: "The field 'email' must be a valid email address"
        details:
          type: array
          description: Additional error details when available
          items:
            type: object
            properties:
              field:
                type: string
                description: The field that caused the error
                examples:
                  - value: "ContactEmail"
              reason:
                type: string
                description: Specific reason for the error
                examples:
                  - value: "Invalid format"
              location:
                type: string
                description: Where the error occurred (query, path, body)
                examples:
                  - value: "body"
        requestId:
          type: string
          description: Request identifier for troubleshooting
          examples:
            - value: "req-f8d31a62-e789-4856-9452-5efa50223c7a"

  responses:
    SuccessGetAllUsers:
      description: Successful GET all users response
      content:
        application/json:
          schema:
            type: object
            properties:
              users:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          examples:
            usersList:
              $ref: '#/components/examples/UsersList'

    SuccessGetOneUser:
      description: Successful response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
          examples:
            singleUser:
              $ref: '#/components/examples/SingleUser'

    SuccessPostOneUser:
      description: User added successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
          examples:
            createdUser:
              $ref: '#/components/examples/CreatedUser'

    SuccessPatchOneUser:
      description: User updated successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
          examples:
            updatedUser:
              $ref: '#/components/examples/UpdatedUser'

    SuccessDeleteOneUser:    
      description: User deleted successfully

    SuccessGetAllTasks:
      description: Successful response
      content:
        application/json:
          schema:
            type: object
            properties:
              tasks:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
          examples:
            tasksList:
              $ref: '#/components/examples/TasksList'

    SuccessGetOneTask:
      description: Successful response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Task'
          examples:
            singleTask:
              $ref: '#/components/examples/SingleTask'

    SuccessPostOneTask:
      description: Task added successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Task'
          examples:
            createdTask:
              $ref: '#/components/examples/CreatedTask'

    SuccessPatchOneTask:
      description: Task updated successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Task'
          examples:
            updatedTask:
              $ref: '#/components/examples/UpdatedTask'

    SuccessDeleteOneTask:
      description: Task deleted successfully

    BadRequest:
      description: The request was malformed or contains invalid parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "BAD_REQUEST"
            message: "The request contains invalid parameters"
            details:
              - field: "WarningOffset"
                reason: "Must be a negative integer"
                location: "body"
            requestId: "req-f8d31a62-e789-4856-9452-5efa50223c7a"
    
    Unauthorized:
      description: Authentication is required or the provided credentials are invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "UNAUTHORIZED"
            message: "Authentication is required to access this resource"
            requestId: "req-f8d31a62-e789-4856-9452-5efa50223c7a"
    
    Forbidden:
      description: The authenticated user does not have permission to access the requested resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "FORBIDDEN"
            message: "You do not have permission to access this resource"
            requestId: "req-f8d31a62-e789-4856-9452-5efa50223c7a"
    
    NotFound:
      description: The requested resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "NOT_FOUND"
            message: "The requested resource could not be found"
            requestId: "req-f8d31a62-e789-4856-9452-5efa50223c7a"
    
    TooManyRequests:
      description: The client has sent too many requests in a given amount of time
      headers:
        Retry-After:
          schema:
            type: integer
          description: Number of seconds to wait before making a new request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "RATE_LIMIT_EXCEEDED"
            message: "Rate limit exceeded. Try again in 30 seconds"
            requestId: "req-f8d31a62-e789-4856-9452-5efa50223c7a"
    
    ServerError:
      description: An unexpected server error occurred
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: "SERVER_ERROR"
            message: "An unexpected error occurred. Please try again later"
            requestId: "req-f8d31a62-e789-4856-9452-5efa50223c7a"  
  
  examples:
    UsersList:
      summary: List of users
      value:
        users:
          - LastName: "Smith"
            FirstName: "Ferdinand"
            ContactEmail: "f.smith@example.com"
            Id: 1
          - LastName: "Jones"
            FirstName: "Jill"
            ContactEmail: "j.jones@example.com"
            Id: 2
          - LastName: "Martinez"
            FirstName: "Marty"
            ContactEmail: "m.martinez@example.com"
            Id: 3
          - LastName: "Bailey"
            FirstName: "Bill"
            ContactEmail: "b.bailey@example.com"
            Id: 4
    
    NewUser:
      summary: Example of new user data
      value:
        LastName: "Doe"
        FirstName: "John"
        ContactEmail: "j.doe@example.com"
    
    CreatedUser:
      summary: Example of newly created user
      value:
        Id: 5
        LastName: "Doe"
        FirstName: "John"
        ContactEmail: "j.doe@example.com"
    
    SingleUser:
      summary: Example of a single user
      value:
        LastName: "Smith"
        FirstName: "Ferdinand"
        ContactEmail: "f.smith@example.com"
        Id: 1
    
    UserPatch:
      summary: Example of user patch data
      value:
        ContactEmail: "new.email@example.com"
    
    UpdatedUser:
      summary: Example of updated user
      value:
        LastName: "Smith"
        FirstName: "Ferdinand"
        ContactEmail: "new.email@example.com"
        Id: 1
    
    TasksList:
      summary: List of tasks
      value:
        tasks:
          - UserId: 1
            TaskTitle: "Grocery shopping"
            TaskDescription: "eggs, bacon, gummy bears"
            DueDate: "2024-02-20T17:00:00.000-05:00"
            WarningOffset: 60
            Id: 1
          - UserId: 1
            TaskTitle: "Piano recital"
            TaskDescription: "Daughter's first concert appearance"
            DueDate: "2024-04-02T15:00:00-05:00"
            WarningOffset: 30
            Id: 2
          - UserId: 2
            TaskTitle: "Oil change"
            TaskDescription: "5K auto service"
            DueDate: "2024-03-10T09:00:00-05:00"
            WarningOffset: 60
            Id: 3
          - UserId: 3
            TaskTitle: "Get shots for dog"
            TaskDescription: "Annual vaccinations for poochy"
            DueDate: "2024-05-11T14:00:00-05:00"
            WarningOffset: 20
            Id: 4
    
    NewTask:
      summary: Example of new task data
      value:
        UserId: 1
        TaskTitle: "New Task"
        TaskDescription: "Description of the new task"
        DueDate: "2024-06-01T12:00:00-05:00"
        WarningOffset: 5
    
    CreatedTask:
      summary: Example of newly created task
      value:
        Id: 5
        UserId: 1
        TaskTitle: "New Task"
        TaskDescription: "Description of the new task"
        DueDate: "2024-06-01T12:00:00-05:00"
        WarningOffset: 5
    
    SingleTask:
      summary: Example of a single task
      value:
        UserId: 1
        TaskTitle: "Grocery shopping"
        TaskDescription: "eggs, bacon, gummy bears"
        DueDate: "2024-02-20T17:00:00-05:00"
        WarningOffset: 10
        Id: 1
    
    TaskPatch:
      summary: Example of task patch data
      value:
        TaskDescription: "Updated description"
    
    UpdatedTask:
      summary: Example of updated task
      value:
        UserId: 1
        TaskTitle: "Grocery shopping"
        TaskDescription: "Updated description"
        DueDate: "2024-02-20T17:00:00-05:00"
        WarningOffset: 10
        Id: 1